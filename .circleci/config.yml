# Java Gradle CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-java/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:17.0.3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run:
          name: Unit Tests
          command: ./gradlew unitTests

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true

      - run:
          name: Package Jar
          command: ./gradlew bootJar

      - run: docker build -t bettercode.dev/oe-todo-tasks:$CIRCLE_BRANCH .
      - store_test_results:
          path: build/test-results

  integrationTests:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get -y install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version

      - checkout
      - run: ./gradlew -x test clean build
      - run: ./gradlew integrationTests
      - store_test_results:
          path: build/test-results

  componentTests:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get -y install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version

      - checkout
      - run: ./gradlew clean build bootJar
      - run: docker build -t bettercode.dev/oe-todo-tasks:$CIRCLE_BRANCH .
      - run: ./gradlew componentTests

  pushImage:
    docker:
      - image: cimg/openjdk:17.0.3
    working_directory: ~/repo
    steps:
      - checkout
      - run: ./gradlew -x test bootJar
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: docker build -t djagielo/oe-todo-tasks:main-$CIRCLE_SHA1 .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker push djagielo/oe-todo-tasks:main-$CIRCLE_SHA1

workflows:
  version: 2
  build_test_push_image:
    jobs:
      - build
      - integrationTests:
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - componentTests:
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - pushImage:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - publish-docker-image
          context:
            - oe-todo